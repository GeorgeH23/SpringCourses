-d // means to run the container in the background as a daemon process
-p // exposes ports for other applications to connect
-v // volume
-q // run command in quiet mode
-it // run interactively

docker-compose -f ops/docker/postgres.yml up -d
docker ps
docker logs -f <containerID>

docker system prune
docker run mongo
docker run -d mongo
docker run -p 27017:27017 -d mongo //to expose the port for applications
docker run -p 27017:27017 -v /c/Users/lampy/Desktop/dockerdata/mongo:/data/db -d mongo // not working for windows

docker volume create --name=mongodata
docker volume inspect mongodata
docker volume ls
docker volume prune
docker run -d -p 27017:27017 -v mongodata:/data/db --name=mymongo mongo

docker run -d --hostname guru-rabbit --name some-rabbit -p 8080:15672 -p 5671:5671 -p 5672:5672 rabbitmq:3-management

docker run --name guru-mysql -e MYSQL_ALLOW_EMPTY_PASSWORD=yes -v mysqldata -p 3307:3306 -d mysql

docker run -d centos tail -f /dev/null
docker exec -it <container name> bash
yum install java // to install java in the centos image

//============================================DOCKER FILE========================================================
FROM centos

RUN yum install -y java-11

VOLUME /tmp

ADD /spring-boot-web-0.0.1-SNAPSHOT.jar myapp.jar

RUN sh -c 'touch ./myapp.jar'

EXPOSE 8080

ENTRYPOINT ["java","-Djava.security.egd=file:/dev/./urandom","-jar","/myapp.jar"]
//============================================DOCKER FILE========================================================

docker build -t spring-boot-docker .
docker run -d -p 8080:8080 spring-boot-docker

